COP 3503 - Project 2

Assigned: October 1, 2012

Due: October 15, 2012 11:59 PM

Project Submission Guidelines

UPDATE: Solution here.
Description:

For this project you will be modeling a simplified version of the RedBox Movie/
Videogame Rental system. (which can be found on campus and around the city)

This will include it's Customers, it's Rentals and the different ways to
manipulate data and sort them.
You will be using the interfaces Comparable/Comparator/Cloneable and the data
structure ArrayList.
You are required to create the following classes (all of them are going to be
public classes in their own files).
Click on the links to get the descriptions:

UPDATE October 11th: There was a slight error in the description of the
printVideogames() and printMovies method in the RedBox class. It should now
match the Rental, Movie and Videogame toString() methods.

NOTE on using diff for comparison:. Use the following command for comparing
your output file with mine (to be given later). Make sure you use it before
submitting:
        diff -B file1 file2

The "-B" ignores extra lines.

NOTE:. Try to work on each class one-by-one. Don't try to implement all the
classes in one go - work on one first and make sure it works before moving on
to the others.

*******************************************************************************
Date
The Date class

The date class represents a date - month/day/year. It implements the
interfaces Comparable and Cloneable.
Most of the class has been provided to you. Download the Date.java file.

You are required to implement the compareTo(Date date) and clone() methods.

Parts of the code which you are required to fill are marked by "YOUR CODE GOES
 HERE".
Properties:
----------
1) private int day.
2) private int month.
4) private int year.

Constructors:
------------
1) public Date(int month, int day, int year)
   // Set's the properties appropriately

Methods:
--------
-get/set methods for all the properties (already implemented):

-public int compareTo(Date date):
    Returns 1 if this date is smaller than the date passed in. (For ex.
    Date(9,1,2011) < Date(9,1,2012) = return 1)
    Returns -1 if this date is larger than the date passed in. (For ex.
    Date(9,1,2011) > Date(9,1,2010) = return -1)
    Returns 0 if the dates are equal

-public Object clone() throws CloneNotSupportedException:
    Returns a deep copy

-toString() - The toString() method is public and returns a String.  (already
implemented)
              It should return a String in this format:
              month/day/year

*******************************************************************************
Rental
The Rental class

The Rental class is an abstract class which implements Comparable<Rental> and
Comparator<Rental>.

The class represents a Rentable object and it is going to be the superclass
for the Movie and Videogame classes.

NOTE: Remember to import java.util.Comparator for this class

Properties:
----------
1) protected String title.
2) protected String genre.
3) protected double costPerDay.         // cost for renting per day
4) protected double averageRating.      // The average rating given by
Customers
5) protected int numTimesChecked.       // The number of times checked out by
Customers
6) protected boolean checkedOut.        // Whether the rental is currently
checked out or not
7) protected Date releaseDate.          // The release date for the Rental

Constructors:
------------
1) public Rental()
    empty constructor

2) public Rental(double costPerDay, String title, String genre, double
averageRating, int numTimesChecked, Date releaseDate)
    sets the properties appropriately


3) public Rental(double costPerDay, String title, String genre, Date
releaseDate)
    -sets the properties appropriately
    -sets the averageRating to 0
    -sets the numTimesChecked to 0
    (HINT: Use the constructor already defined)

Methods:
--------
get/set methods for all the properties (you should be able to figure out the
return types/parameters):

-getReleaseDate/setReleaseDate

-getTitle/setTitle

-getGenre/setGenre

-getNumTimesChecked/setNumTimesChecked

-getAverageRating/setAverageRating

-getCostPerDay/setCostPerDay

---------------------------------------
METHODS FOR CHECKING OUT/IN A RENTAL:
---------------------------------------

-public boolean isCheckedOut()
    Returns true if rental has been checked out, false if it hasn't.

-public void checkOut()
    Checks out the rental.
    Sets the checkout variable to true, and increments the numTimesChecked
    variable

-public double checkIn(int numDays, double rating)
    Checks in the rental.
    Sets the checkout variable to false.
    Updates the averageRating by including the rating given by the Customer
    returns the total cost for renting (use numDays and costPerDay)

----------------------
INTERFACE METHODS:
----------------------
-public int compareTo(Rental rental)
    Does comparisons based on the title. (HINT: The String class also
    implements Comparable)

-public int compare(Rental rental1, Rental rental2)
    Does comparisons based on popularity (numTimesChecked)
    If rental1's popularity < rental2's popularity return 1
    If rental1's popularity > rental2's popularity return -1
    else return 0

-toString() - The toString() method is public and returns a String.
              It should return a String in this format:

              title, Genre: genre, Release Date: releaseDate, Rating:
              averageRating, Times Checked Out: numTimesChecked

*******************************************************************************
Movie
The Movie class

The class represents a Rentable Movie object.
The Movie class is a sub-class of the Rental.

It will also implement the interface Cloneable.

Properties:
----------
1) private String format.       // DVD/Blu-Ray

Constructors:
------------
1) public Movie()
    empty constructor

2) public Movie(String title, String genre, double averageRating, int
numTimesChecked, Date releaseDate, String format)
    -sets the properties appropriately
    -sets the costPerDay to 1.0
    (HINT: Try to use the super class' constructor)

3) public Movie(String title, String genre, Date releaseDate, String format)
    -sets the properties appropriately
    -sets the costPerDay to 1.0
    -sets the averageRating to 0
    -sets the numTimesChecked to 0
    (HINT: Try to use the constructor already defined above)

Methods:
--------
get/set methods for all the properties (you should be able to figure out the
return types/parameters):

-getFormat/setFormat

----------------------
INTERFACE METHODS:
----------------------
-public Object clone() throws CloneNotSupportedException
    Returns a deep copy.

-toString() - The toString() method is public and returns a String.
              It should return a String in this format:

              title, Genre: genre, Release Date: releaseDate, Rating:
              averageRating, Times Checked Out: numTimesChecked, Format: format
              (HINT: Use the super class' toString() method somehow)

*******************************************************************************
Videogame
The Videogame class

The class represents a Rentable Videogame object.
The Videogame class is a sub-class of the Rental.

It will also implement the interface Cloneable.

Properties:
----------
1) private String platform.       // PS3/Xbox360/Wii

Constructors:
------------
1) public Videogame()
    empty constructor

2) public Videogame(String title, String genre, double averageRating, int
numTimesChecked, Date releaseDate, String platform)
    -sets the properties appropriately
    -sets the costPerDay to 2.0
    (HINT: Try to use the super class' constructor)

3) public Videogame(String title, String genre, Date releaseDate, String
platform)
    -sets the properties appropriately
    -sets the costPerDay to 2.0
    -sets the averageRating to 0
    -sets the numTimesChecked to 0
    (HINT: Try to use the constructor already defined above)

Methods:
--------
get/set methods for all the properties (you should be able to figure out the
return types/parameters):

-getPlatform/setPlatform

----------------------
INTERFACE METHODS:
----------------------
-public Object clone() throws CloneNotSupportedException
    Returns a deep copy.

-toString() - The toString() method is public and returns a String.
              It should return a String in this format:

              title, Genre: genre, Release Date: releaseDate, Rating:
              averageRating, Times Checked Out: numTimesChecked, Platform:
              platform
              (HINT: Use the super class' toString() method somehow)

*******************************************************************************
Customer
The Customer class

The Customer class represents a customer - it will hold a list of currently
checked out rentals, a list of all the items previously checked out and the
total charges applied to the customer.



NOTE: Remember to import java.util.ArrayList for this class
Properties:
----------
1) private String name.                                 // the name of the
customer
2) private ArrayList<Rental> checkedOut;          // This ArrayList will hold
the currently checked out Rentals by the customer
3) private ArrayList<Rental> checkOutHistory;     // This ArrayList will hold
the list of Rentals previously checked out by the customer
4) private double totalCharge;                          // The total amount
charged to the user's account

Constructors:
------------
1) public Customer(String name)
    Set's the name.
    Set's totalCharge to 0.0;
    Initializes checkedOut and checkOutHistory to empty ArrayLists.

Methods:
--------
get/set methods for all the properties (you should be able to figure out the
return types/parameters):

-getName/setName

-getCheckedOut/setCheckedOut

-getCheckOutHistory/setCheckOutHistory

-getTotalCharge/setTotalCharge

---------------------------------------
METHODS FOR CHECKING OUT/IN A RENTAL:
---------------------------------------

-public boolean checkOut(Rental rental)
    Tries to checkout the rental passed in.
    -If rental is already checked out, returns false.
    -Otherwise, checks out the rental (HINT: Which method in the Rental class
    needs to be called?)
    -Adds the rental to the list checkedOut and returns true

-public boolean checkIn(Rental rental, int numDays, double rating)
    Tries to check in the rental.
    -First checks if the rental is in the checkedOut list. (HINT: Which method
    in the ArrayList class will you use?) If it's not returns false.
    -Otherwise, tries to check the rental in (also passed in numDays and
    rating). (HINT: Which method in the Rental class needs to be called?)
    -Increments the totalCharge by the appropriate cost (look at the previous
    line)
    -Removes the rental from the checkedOut list.
    -Adds the rental to the checkOutHistory list.
    -Returns true.

-toString() - The toString() method is public and returns a String.
              It should return a String in this format:

              Customer Name: name
              Total Charge: totalCharge
              Total Rentals Currently Checked Out: size of checkedOut
              Total Rentals Previously Checked Out: size of checkOutHistory

*******************************************************************************
MovieComparison
The MovieComparison class

The MovieComparison class is only used for implementing the Comparator<Movie>
interface.

NOTE: Remember to import java.util.Comparator for this class
Methods:
--------
-public int compare(Movie movie1, Movie movie2):
    Does comparison based on the format of the movies (HINT: The String class
    implements the Comparable interface)

*******************************************************************************
VideogameComparison
The VideogameComparison class

The VideogameComparison class is only used for implementing the
Comparator<Videogame> interface.

NOTE: Remember to import java.util.Comparator for this class
Methods:
--------
-public int compare(Videogame videogame1, Videogame videogame2):
    Does comparison based on the platform of the videogames (HINT: The String
    class implements the Comparable interface)

*******************************************************************************
DateComparison
The DateComparison class

The DateComparison class is only used for implementing the Comparator<Rental>
interface.

NOTE: Remember to import java.util.Comparator for this class
Methods:
--------
-public int compare(Rental rental1, Rental rental2):
    Does comparison based on the release dates for the Rental objects.

*******************************************************************************
RatingComparison
The RatingComparison class

The RatingComparison class is only used for implementing the
Comparator<Rental> interface.

NOTE: Remember to import java.util.Comparator for this class
Methods:
--------
-public int compare(Rental rental1, Rental rental2):
    Does comparison based on the average rating of the rentals.
    if rating of rental1 > rating of rental2, return -1
    if rating of rental1 < rating of rental2, return 1
    if rating of rental1 == rating of rental2, return 0

*******************************************************************************
RedBox
The RedBox class

The RedBox class is the main class which holds all the information.

NOTE: Remember to import java.util.Arrays and java.util.ArrayList for this
class

Properties:
----------
1) private Videogame[] videogames.              // Array of Videogames
2) private Movie[] movies.                      // Array of Movies
3) private ArrayList<Customer> customers. // ArrayList of Customers

Constructors:
------------
1) public RedBox(Videogame[] videogames, Movie[] movies)
    -Set's the videogames and movies array appropriately
    -initializes the customers ArrayList to an empty one

Methods:
--------
get/set methods for all the properties (you should be able to figure out the
return types/parameters):

-getVideogames/setVideogames

-getMovies/setMovies

-getCustomers/setCustomers

-public void addCustomer(Customer customer)
    Adds the customer to the customers ArrayList

---------------------------------------
METHODS FOR SEARCHING RENTALS:
---------------------------------------

-public int findVideogameByTitle(String title)
    Goes through the videogames array and returns the index of the first
    Videogame which has the same title as the one passed in.
    Returns -1 if Videogame is not found

-public int findMovieByTitle(String title)
    Goes through the movies array and returns the index of the first Movie
    which has the same title as the one passed in.
    Returns -1 if Movie is not found

-public Videogame getVideogameByIndex(int index)
    Returns the Videogame object at the index of the videogames array.
    Returns null if the index is out of bounds (check for both lower and upper)

-public Movie getMovieByIndex(int index)
    Returns the Movie object at the index of the movies array.
    Returns null if the index is out of bounds (check for both lower and upper)


---------------------------------------
METHODS FOR SORTING THE ARRAYS:
---------------------------------------

-public void sortVideogamesByPopularity()
    Sorts the videogames array according to popularity (number of times it has
    been checked out)
    in descending order

-public void sortVideogamesByTitle()
    Sorts the videogames array according to titles
    in ascending order

-public void sortVideogamesByRating()
    Sorts the videogames array according to the average rating
    in descending order

-public void sortVideogamesByPlatform()
    Sorts the videogames array according to platform (PS3/Xbox360/Wii)
    in ascending order

-public void sortVideogamesByReleaseDate()
    Sorts the videogames array according to release date
    in descending order

------SIMILAR SORTING METHODS FOR MOVIES:----------------

-public void sortMoviesByPopularity()
    Sorts the movies array according to popularity (number of times it has
    been checked out)
    in descending order

-public void sortMoviesByTitle()
    Sorts the movies array according to titles
    in ascending order

-public void sortMoviesByRating()
    Sorts the movies array according to the average rating
    in descending order

-public void sortMoviesByFormat()
    Sorts the movies array according to format (DVD/Blu-Ray)
    in ascending order

-public void sortMoviesByReleaseDate()
    Sorts the movies array according to release date
    in descending order

---------------------------------------
METHODS FOR PRINTING THE ARRAYS:
---------------------------------------

-public void printVideogames()
    Outputs to the screen the list of all the Videogame objects in the
    videogames array. This is what the output should look like:

    1.title, Genre: genre, Release Date: releaseDate,  Rating: averageRating,
    Times Checked Out: numTimesChecked, Platform: platform
    2.title, Genre: genre, Release Date: releaseDate,  Rating: averageRating,
    Times Checked Out: numTimesChecked, Platform: platform
    3.title, Genre: genre, Release Date: releaseDate,  Rating: averageRating,
    Times Checked Out: numTimesChecked, Platform: platform
    4. And so forth...

    (HINT: Use the Videogame class' toString() method)


-public void printMovies()
    Outputs to the screen the list of all the Movie objects in the movies
    array. This is what the output should look like:

    1.title, Genre: genre, Release Date: releaseDate,  Rating: averageRating,
    Times Checked Out: numTimesChecked, Format: format
    2.title, Genre: genre, Release Date: releaseDate,  Rating: averageRating,
    Times Checked Out: numTimesChecked, Format: format
    3.title, Genre: genre, Release Date: releaseDate,  Rating: averageRating,
    Times Checked Out: numTimesChecked, Format: format
    4. And so forth...

    (HINT: Use the Movie class' toString() method)

*******************************************************************************


Use TestDriver to test your solution. Compare it with our output.

NOTE: This driver is NOT comprehensive - we will be using a different, more
comprehensive driver to test your solution. So create different test cases on
your own (using the test driver as a template).

